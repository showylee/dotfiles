"use strict";function _toConsumableArray(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var _slice=Array.prototype.slice,_slicedToArray=function(){function e(e,t){var n=[],r=!0,i=!1,s=void 0;try{for(var a,o=e[Symbol.iterator]();!(r=(a=o.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(l){i=!0,s=l}finally{try{!r&&o["return"]&&o["return"]()}finally{if(i)throw s}}return n}return function(t,n){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return e(t,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),DEFAULT="__default__",STOPPED={},ADD_EVENT="newListener",REMOVE_EVENT="removeListener",DEF_EVENTS=" "+ADD_EVENT+" "+REMOVE_EVENT+" ",EventEmitter=function(){function e(t){_classCallCheck(this,e),Object.defineProperty(this,"events",{value:{}})}return _createClass(e,[{key:"singleEvent",value:function(){return Object.defineProperty(this,"single",{value:!0}),this}},{key:"addListener",value:function(e,t,n){var r=this.single&&!~DEF_EVENTS.indexOf(" "+s+" ")?[DEFAULT,e]:[e,t],i=_slicedToArray(r,2),s=i[0],a=i[1];return this.addHandler(s,{handler:a,scope:n}),this.__emit("newListener",[s,a]),this}},{key:"on",value:function(){return this.addListener.apply(this,arguments),this}},{key:"once",value:function(e,t,n){var r=this.single&&!~DEF_EVENTS.indexOf(" "+s+" ")?[DEFAULT,e]:[e,t],i=_slicedToArray(r,2),s=i[0],a=i[1];return this.addHandler(s,{handler:a,once:!0,scope:n}),this}},{key:"removeListener",value:function(e,t){var n=this.single&&!~DEF_EVENTS.indexOf(" "+i+" ")?[DEFAULT,e]:[e,t],r=_slicedToArray(n,2),i=r[0],s=r[1],a=this.events[i];return a?(a=a.filter(function(e){return e.handler===s?(this.__emit("removeListener",(this.single?[]:[i]).concat(e.handler)),!1):!0}),this):void 0}},{key:"removeAllListeners",value:function(e){var t=this,n=this.single?DEFAULT:e,r=n?_defineProperty({},n,this.events[n]):this.events;return Object.keys(r).sort(function(e,t){return e===REMOVE_EVENT?1:t===REMOVE_EVENT?-1:0}).forEach(function(e){r[e].forEach(function(t){this.__emit("removeListener",(this.single?[]:[e]).concat(t.handler))},t),t.events[e]=[]},this),this}},{key:"setMaxListeners",value:function(e){return this.maxListeners=e,this}},{key:"defaultMaxListeners",value:function(t){return Object.defineProperty(e.prototype,"maxListeners",{value:t,writeable:!0}),this}},{key:"listeners",value:function(e){return(this.events[e]||[]).map(function(e){return e.handler})}},{key:"emit",value:function(e){return this.__emit.apply(this,this.single?[DEFAULT].concat(_slice.call(arguments)):arguments)}}]),e}();Object.defineProperties(EventEmitter.prototype,{maxListeners:{value:10,writeable:!0},__emit:{value:function(e){var t=[].slice.call(arguments,1),n=this.events[e]||[],r=Promise.resolve(),i=this;return n.forEach(function(e,s){r=r.then(function(){var n,r=null,s=e.scope||i;s.stop=function(){r=Promise.reject(STOPPED)};var a=(n=e.handler).call.apply(n,[s].concat(_toConsumableArray(t)));return s.stop=void 0,r||a}),e.once&&n.splice(s,1)}),r["catch"](function(e){if(e!==STOPPED)throw e}),this}},addHandler:{value:function(e,t){var n=this.events[e]||(this.events[e]=[]);!(n.length>=this.maxListeners)||this.warned&&this.warned[e]||(console.warn("warning: possible EventEmitter memory leak detected. "+(n.length+1)+" bar listeners added. Use emitter.setMaxListeners() to increase limit."),this.warned||Object.defineProperty(this,"warned",{value:{}}),this.warned[e]=!0),this.events[e].push(t)}}}),EventEmitter.listenerCount=function(e,t){return e.listeners(t).length},module.exports=EventEmitter;
